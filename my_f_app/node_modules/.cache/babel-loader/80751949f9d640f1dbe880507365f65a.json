{"ast":null,"code":"var _jsxFileName = \"C:\\\\IT_academy\\\\web_app\\\\my_f_app\\\\src\\\\ToDoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport './ToDoList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoList = () => {\n  _s();\n\n  const [inputText, setInputText] = useState(\"Enter a task...\");\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    try {\n      const tasksFromStorage = localStorage.getItem('tasks') || [];\n      const parsedTasks = JSON.parse(tasksFromStorage);\n      setTasks(parsedTasks);\n    } catch (err) {\n      setTasks([]);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    console.log('tasks udated');\n  }, [tasks]);\n\n  const addTask = () => {\n    if (inputText.trim() === '') return alert('Empty string cannot be added');\n    if (tasks.some(el => el.title.toLowerCase() === inputText.toLowerCase())) return alert('Such task already exists');\n    const tasksCopy = [...tasks];\n    tasksCopy.push({\n      id: uuid(),\n      title: inputText,\n      isDone: false\n    });\n    setTasks(tasksCopy);\n    setInputText('Enter a task...');\n  };\n\n  const deleteTask = id => {\n    console.log('delete clicked');\n    const filtrTasks = tasks.filter(el => el.id != id);\n    if (filtrTasks.length === 0) localStorage.removeItem('tasks');\n    setTasks(filtrTasks);\n  };\n\n  const complete = id => {\n    const changedTasks = tasks.map(el => {\n      if (el.id === id) {\n        return { ...el,\n          isDone: !el.isDone\n        };\n      }\n\n      return el;\n    });\n    setTasks(changedTasks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        addTask();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: event => setInputText(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list\",\n      children: tasks.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `task ${el.isDone ? 'task-done' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: el.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 95\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"dbtn\",\n            onClick: () => deleteTask(el.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"dbtn\",\n            onClick: () => complete(el.id),\n            children: el.isDone ? 'Back' : 'Complete'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, el.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ToDoList, \"409E6NhItla19p9Vb7+CZWEoH1g=\");\n\n_c = ToDoList;\nexport default ToDoList;\n{\n  /*{ id: uuid(), title: 'Buy bread', isDone: false },\r\n         { id: uuid(), title: 'Celebrate', isDone: true },\r\n         { id: uuid(), title: 'Create site', isDone: false } */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["C:/IT_academy/web_app/my_f_app/src/ToDoList.jsx"],"names":["React","useState","useEffect","v4","uuid","ToDoList","inputText","setInputText","tasks","setTasks","tasksFromStorage","localStorage","getItem","parsedTasks","JSON","parse","err","setItem","stringify","console","log","addTask","trim","alert","some","el","title","toLowerCase","tasksCopy","push","id","isDone","deleteTask","filtrTasks","filter","length","removeItem","complete","changedTasks","map","event","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { v4 as uuid } from 'uuid'\r\nimport './ToDoList.css'\r\n\r\n\r\nconst ToDoList = () => {\r\n    const [inputText, setInputText] = useState(\"Enter a task...\");\r\n    const [tasks, setTasks] = useState([])\r\n    useEffect(() => {\r\n        try {\r\n            const tasksFromStorage = localStorage.getItem('tasks') || [];\r\n            const parsedTasks = JSON.parse(tasksFromStorage);\r\n            setTasks(parsedTasks);\r\n        } catch (err) {\r\n            setTasks([])\r\n        }\r\n\r\n    }, [])\r\n        ;\r\n    useEffect(() => {\r\n        localStorage.setItem('tasks', JSON.stringify(tasks))\r\n        console.log('tasks udated')\r\n    }, [tasks]);\r\n\r\n    const addTask = () => {\r\n        if (inputText.trim() === '') return alert('Empty string cannot be added');\r\n        if (tasks.some((el) => el.title.toLowerCase() === inputText.toLowerCase())) return alert('Such task already exists');\r\n        const tasksCopy = [...tasks];\r\n        tasksCopy.push({ id: uuid(), title: inputText, isDone: false });\r\n        setTasks(tasksCopy);\r\n        setInputText('Enter a task...');\r\n    }\r\n\r\n    const deleteTask = (id) => {\r\n        console.log('delete clicked')\r\n        const filtrTasks = tasks.filter((el) => el.id != id)\r\n        if (filtrTasks.length === 0) localStorage.removeItem('tasks')\r\n        setTasks(filtrTasks)\r\n    }\r\n    const complete = (id) => {\r\n        const changedTasks = tasks.map((el) => {\r\n            if (el.id === id) {\r\n                return { ...el, isDone: !el.isDone }\r\n            }\r\n            return el;\r\n        })\r\n        setTasks(changedTasks);\r\n    }\r\n    return (\r\n        <div className=\"todo-wrapper\">\r\n            <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                addTask();\r\n            }}>\r\n                <input type=\"text\" value={inputText} onChange={(event) => setInputText(event.target.value)} />\r\n                <button type=\"submit\">Add task</button>\r\n            </form>\r\n            <ul className=\"list\">\r\n                {tasks.map((el) => {\r\n                    return <li key={el.id} className={`task ${el.isDone ? 'task-done' : ''}`}><div className=\"title\">{el.title}</div>\r\n                        <button className=\"dbtn\" onClick={() => deleteTask(el.id)}>Delete</button>\r\n                        <button className=\"dbtn\" onClick={() => complete(el.id)}>{el.isDone ? 'Back' : 'Complete'}</button>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList\r\n{/*{ id: uuid(), title: 'Buy bread', isDone: false },\r\n        { id: uuid(), title: 'Celebrate', isDone: true },\r\n        { id: uuid(), title: 'Create site', isDone: false } */}"]},"metadata":{},"sourceType":"module"}